esphome:
  name: espnode
  friendly_name: ESPNode

esp8266:
  # board: nodemcuv2
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "encrypt"

ota:
  password: "password"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: ###.###.###.###
    gateway: ###.###.###.###
    subnet: ###.###.###.###
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Espnode Fallback Hotspot"
    password: "password"

captive_portal:
    
 

globals:
   - id: screen_state
     type: int
     restore_value: no
     initial_value: '0'
     
   - id: is_page_five
     type: int
     restore_value: no
     initial_value: '0'

binary_sensor:
  - platform: gpio
    pin:
      number: 15
      mode: INPUT_PULLUP
      inverted: true
    name: "switch1"
    id: switch1
    on_press: 
      then:
       lambda: !lambda |-
        if(id(screen_state)){
         id(screen_state) = 0;
        } else {
         id(screen_state) = 1;
        }

number:
  - platform: template
    name: "esp mp current limit"
    id: esp_mp_current_limit
    optimistic: true
    min_value: 7
    max_value: 50
    step: .5   

sensor:
  - platform: homeassistant
    id: outside_temp
    entity_id: sensor.esptemps_outside_temperature
    internal: true
  - platform: homeassistant
    id: inside_temp
    entity_id: sensor.esptemps_inside_temperature
    internal: true
  - platform: homeassistant
    id: fridge_temp
    entity_id: sensor.esptemps_refrigerator_temperature
    internal: true
  - platform: homeassistant
    id: batt_charge
    entity_id: sensor.battery_state_of_charge
    internal: true
  - platform: homeassistant
    id: mp_limit
    entity_id: sensor.multiplus_current_limit
    internal: true

 
  - platform: rotary_encoder
    name: "dial2"
    id: "dial2"
    pin_a: 12
    pin_b: 13
    # publish_initial_value: true
    on_clockwise:
      then:
        - if:
            condition:
                lambda: |- 
                  if(id(is_page_five) == 1 && id(screen_state) == 1){
                    return true;
                  } else{
                    return false;
                  }
            then:
              - logger.log: "here"
              - number.increment: esp_mp_current_limit
            else:
              - display.page.show_next: display1 
              - logger.log: "Next Page"
        - logger.log:
            format: "The screen is %.1d and eMcL is %.1d and Current limit is %.1d"
            args: [ 'id(screen_state)', 'id(esp_mp_current_limit).state', 'id(mp_limit).state' ]
      
    on_anticlockwise:
      then:
        - if:
            condition:
                lambda: |- 
                  if(id(is_page_five) == 1 && id(screen_state) == 1){
                    return true;
                  } else{
                    return false;
                  }
            then:
                - logger.log: "there"
                - number.decrement: esp_mp_current_limit
            else:
              - display.page.show_previous: display1 
              - logger.log: "Next Page"
        - logger.log:
            format: "The screen is %.1d and slider is %.1d and Current limit is %.1f"
            args: [ 'id(screen_state)', 'id(esp_mp_current_limit).state', 'id(mp_limit).state' ]






font:
  # gfonts://family[@weight]
  - file: "gfonts://Roboto"
    id: roboto
    size: 20

  - file:
      type: gfonts
      family: Roboto
      weight: 900
    id: font2
    size: 16

i2c:
#  sda: D1
#  scl: D2
  sda: 4
  scl: 5
  frequency: 800kHz

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    reset_pin: D0
    address: 0x3C
    id: display1
    pages:
      - id: page1
        lambda: |-
          id(is_page_five) = 0;
          if (id(inside_temp).has_state()) {
            it.printf(0, 0, id(roboto), "Inside:");
            it.printf(0, 32, id(roboto), "%.1f°", id(inside_temp).state);
          } else {
            it.print(0, 0, id(roboto), "Not Connected");
          }
      - id: page2
        lambda: |-
          id(is_page_five) = 0;
          if (id(inside_temp).has_state()) {
            it.printf(0, 0, id(roboto), "Outside:");
            it.printf(0, 32, id(roboto), "%.1f°", id(outside_temp).state);
          } else {
            it.print(0, 0, id(roboto), "Not Connected");
          }
      - id: page3
        lambda: |-
          id(is_page_five) = 0;
          if (id(inside_temp).has_state()) {
            it.printf(0, 0, id(roboto), "Fridge:");
            it.printf(0, 32, id(roboto), "%.1f°", id(fridge_temp).state);
          } else {
            it.print(0, 0, id(roboto), "Not Connected");
          }
      - id: page4
        lambda: |-
          id(is_page_five) = 0;
          if (id(inside_temp).has_state()) {
            it.printf(0, 0, id(roboto), "Batt Charge:");
            it.printf(0, 32, id(roboto), "%.1f %%", id(batt_charge).state);
          } else {
            it.print(0, 0, id(roboto), "Not Connected");
          }
      - id: page5
        lambda: |-
          id(is_page_five) = 1;
          if(id(screen_state) == 0){
            it.print(0, 0, id(roboto), "Multiplus Input Limit");
            it.printf(0, 32, id(roboto), "%.1f AMPS", id(mp_limit).state);
          } else {
            it.print(0, 0, id(roboto), "Adjust it");
            it.printf(0, 32, id(roboto), "%.1f AMPS", id(esp_mp_current_limit).state);
          }
